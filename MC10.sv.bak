module MC10(
		input logic RST,
		input logic Clk,
		input logic TAPE,
		input logic[3:0] button,
		output logic[3:0] SEG_SEL,
		output logic[3:0] LED,
		output logic[6:0] HEX_OUT,
		output logic beep, R, G, B, HSYNC, VSYNC,
		output logic audio,
		input wire ps2_clk, ps2_data
		);
logic reset, TAPE_S;
logic rw;
logic vdg_clk_25, vdg_clk_10, cpu_clk;
logic E_CLK;
logic[15:0] CPU_address;
logic[7:0] DATA_IN, DATA_OUT, DD, PORT_A_OUT;
logic[13:0] DA;
logic[7:0] key_code, key_out;
logic spec_key;
logic[5:0] VDG_control;
logic[7:0] debug;
logic[3:0] button_s;
logic[15:0] pc_debug;

always_ff @ (posedge Clk)
begin
	reset <= ~RST;
	TAPE_S <= TAPE;
	button_s <= button;
end
assign audio = VDG_control[5];
assign beep = 1'b1;	//silence the thing
assign LED[3]=TAPE_S;
assign spec_key = (PORT_A_OUT[0]|key_code[3])&(PORT_A_OUT[2]|button_s[0])&(PORT_A_OUT[7]|key_code[7]);
	
PLL0 PLL_inst(.inclk0(Clk), .c0(cpu_clk), .c1(vdg_clk_25), .c2(vdg_clk_10));

//************MEMORY SUBSYSTEM***************************************************************************************************************************
logic[15:0] system_address, CPU_address_s;
logic[7:0] arbiter_ram_out, arbiter_rom_out, memory_data_out, ram_q, rom_q;
logic RAM_W, ROM_E, RAM_E, VDG_E, KBD_E, ROM_E_S, RAM_E_S, VDG_E_S, KBD_E_S, RW_out, E_CLK_S, rw_s;
assign RAM_W = RW_out&((system_address[14]&(~system_address[15]))|(system_address[15]&(~system_address[14])&(~system_address[13])&(~system_address[12])));
assign ROM_E = E_CLK_S & CPU_address_s[14] & CPU_address_s[15];
assign RAM_E = E_CLK_S & ((CPU_address_s[14]&(~CPU_address_s[15]))|(CPU_address_s[15]&(~CPU_address_s[14])&(~CPU_address_s[13])&(~CPU_address_s[12])));
assign VDG_E = E_CLK_S & CPU_address_s[15]&(~CPU_address_s[14])&(CPU_address_s[13]|CPU_address_s[12])&(~rw_s);
assign KBD_E = E_CLK_S & CPU_address_s[15]&(~CPU_address_s[14])&(CPU_address_s[13]|CPU_address_s[12])&rw_s;

always_ff @(posedge Clk)
begin
	CPU_address_s <= CPU_address;
	rw_s <= rw;
	E_CLK_S <= E_CLK;
	ROM_E_S <= ROM_E;
	RAM_E_S <= RAM_E;
	VDG_E_S <= VDG_E;
	KBD_E_S <= KBD_E;
	if(VDG_E_S)
		VDG_control <= DATA_OUT[7:2];
end

always_comb
begin
	if(RAM_E_S)
		DATA_IN = arbiter_ram_out;
	else if(ROM_E_S)
		DATA_IN = arbiter_rom_out;
	else if(KBD_E_S)
		DATA_IN = {2'b11, key_out[5:0]};
	else
		DATA_IN = system_address[7:0];
end

RAM RAM_inst(.address({~system_address[14], system_address[13:0]}), .clock(Clk), .data(memory_data_out), .wren(RAM_W), .q(ram_q));
ROM ROM_inst(.address(system_address[12:0]), .clock(Clk), .q(rom_q));
bus_arbiter_gen2 arbiter_inst(
	.clk(Clk),
	.RW_in(~rw & E_CLK),
	.VDG_address({1'b0, 1'b1, DA}),
	.CPU_address,
	.RAM_data_in(ram_q),
	.ROM_data_in(rom_q),
	.CPU_data_in(DATA_OUT),
	.system_address,
	.RAM_data_out(arbiter_ram_out),
	.ROM_data_out(arbiter_rom_out),
	.VDG_data_out(DD), 
	.memory_data_out, 
	.RW_out);
//*******************************************************************************************************************************************************

//MULTIPLEXED_HEX_DRIVER multiHEX(.Clk, .SEG3(CPU_address[15:12]), .SEG2(CPU_address[11:8]), .SEG1(CPU_address[7:4]), .SEG0(CPU_address[3:0]), .SEG_SEL, .HEX_OUT);
//MULTIPLEXED_HEX_DRIVER multiHEX(.Clk, .SEG3(debug[7:4]), .SEG2(debug[3:0]), .SEG1(key_code[7:4]), .SEG0(key_code[3:0]), .SEG_SEL, .HEX_OUT);
MULTIPLEXED_HEX_DRIVER multiHEX(.Clk, .SEG3(pc_debug[15:12]), .SEG2(pc_debug[11:8]), .SEG1(pc_debug[7:4]), .SEG0(pc_debug[3:0]), .SEG_SEL, .HEX_OUT);

PS2_keyboard keyboard(.clk(Clk), .reset, .ps2_clk, .ps2_data, .key_code, .debug);
KEY_MATRIX MATRIX(.row_select(PORT_A_OUT), .key_code, .key_out);

MC6803_gen2 CPU0(
		.clk(cpu_clk),
		.RST(reset),
		.hold(~button_s[2]),
		.halt(1'b0),
		.nmi(~button_s[1]),
		.PORT_A_IN(PORT_A_OUT),
		.PORT_B_IN({TAPE_S, 2'b11, spec_key, 1'b1}),
		.DATA_IN,
		.PORT_A_OUT,
		.ADDRESS(CPU_address),
		.DATA_OUT,
		.E_CLK,
		.rw,
		.irq(1'b0),
		.pc_debug(pc_debug));

MC6847_gen2 VDG(.DD, .DA, .clk_25(vdg_clk_25), .clk_10(vdg_clk_10), .reset, .R, .G, .B, .HSYNC, .VSYNC, .AG(VDG_control[3]), .SA(DD[7]), .INV(DD[6]));

endmodule
